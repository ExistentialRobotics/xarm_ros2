<?xml version='1.0' encoding='utf-8'?>

<robot xmlns:xacro="http://ros.org/wiki/xacro" name="UF_ROBOT">
  <!-- macro for having property with the same name/value as an argument -->
  <xacro:macro name="define_arg_property" params="prop_name default">
    <xacro:arg name="${prop_name}" default="${default}"/>
    <xacro:property name="${prop_name}" value="$(arg ${prop_name})"/>
  </xacro:macro>

  <xacro:arg name="prefix" default=""/>
  <xacro:arg name="hw_ns" default="xarm"/>
  <xacro:arg name="ros2_control_plugin" default="uf_robot_hardware/UFRobotSystemHardware"/>
  <xacro:arg name="ros2_control_params" default=""/>

  <xacro:arg 
    name="robot_spec_config_file"
    default="$(find xarm_description)/config/default_urdf_arguments/xarm6.yaml"
  />

  <xacro:property
    name="robot_spec_config_file"
    value="$(arg robot_spec_config_file)"
  />

  <xacro:property 
    name="robot_spec" 
    value="${xacro.load_yaml(robot_spec_config_file)}" />

  <xacro:arg
    name="end_effector_config_file"
    default="$(find xarm_description)/config/default_urdf_arguments/end_effector.yaml"
  />

  <xacro:property 
    name="end_effector_config_file"
    value="$(arg end_effector_config_file)"
  />

  <xacro:property 
    name="add_end_effector" 
    value="${xacro.load_yaml(end_effector_config_file)}" 
  />

  <xacro:arg
    name="other_geometry_config_file"
    default="$(find xarm_description)/config/default_urdf_arguments/other_geometry.yaml" 
  />

  <xacro:property
    name="other_geometry_config_file"
    value="$(arg other_geometry_config_file)"
  />

  <xacro:property name="other_geometry"
    value="${xacro.load_yaml(other_geometry_config_file)}"
  />

  <!-- load xarm device -->
  <xacro:include filename="$(find xarm_description)/urdf/xarm_device_macro.xacro" />
  <!-- TODO: maybe make the macros use dicts themselves, but that might be digging too deep -->
  <xacro:xarm_device 
    prefix="$(arg prefix)" 
    hw_ns="$(arg hw_ns)" 
    ros2_control_plugin="$(arg ros2_control_plugin)" 
    ros2_control_params="$(arg ros2_control_params)"

    robot_ip="${robot_spec['robot_ip']}"
    dof="${robot_spec['dof']}" 
    robot_type="${robot_spec['robot_type']}" 
    report_type="${robot_spec['report_type']}"
    baud_checkset="${robot_spec['baud_checkset']}" 
    default_gripper_baud="${robot_spec['default_gripper_baud']}"
    model1300="${robot_spec['model1300']}" 
    robot_sn="${robot_spec['robot_sn']}" 

    limited="${robot_spec['limited']}" 
    effort_control="${robot_spec['effort_control']}" 
    velocity_control="${robot_spec['velocity_control']}"

    attach_to="${robot_spec['attach_to']}" 
    attach_xyz="${robot_spec['attach_xyz']}" 
    attach_rpy="${robot_spec['attach_rpy']}"

    mesh_suffix="${robot_spec['mesh_suffix']}" 
    kinematics_suffix="${robot_spec['kinematics_suffix']}" 

    add_gripper="${add_end_effector['gripper']}" 
    add_vacuum_gripper="${add_end_effector['vacuum_gripper']}" 
    add_bio_gripper="${add_end_effector['bio_gripper']}" 
    add_realsense_d435i="${add_end_effector['realsense_d435i']}" 
    add_d435i_links="${add_end_effector['d435i_links']}" 

    use_gazebo_camera="false" 

    add_other_geometry="${other_geometry['add']}" 
    geometry_type="${other_geometry['type']}" 
    geometry_mass="${other_geometry['mass']}"
    geometry_height="${other_geometry['height']}" 
    geometry_radius="${other_geometry['radius']}"
    geometry_length="${other_geometry['length']}" 
    geometry_width="${other_geometry['width']}"
    geometry_mesh_filename="${other_geometry['mesh_filename']}"
    geometry_mesh_origin_xyz="${other_geometry['mesh_origin_xyz']}" 
    geometry_mesh_origin_rpy="${other_geometry['mesh_origin_rpy']}"
    geometry_mesh_tcp_xyz="${other_geometry['mesh_tcp_xyz']}" 
    geometry_mesh_tcp_rpy="${other_geometry['mesh_tcp_rpy']}"
  />

</robot>
