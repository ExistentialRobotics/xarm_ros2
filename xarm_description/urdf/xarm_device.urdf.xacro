<?xml version='1.0' encoding='utf-8'?>

<robot xmlns:xacro="http://ros.org/wiki/xacro" name="UF_ROBOT">
  <xacro:arg name="prefix" default=""/>

  <xacro:arg name="hw_ns" default="xarm"/>
  <xacro:arg name="limited" default="false"/>
  <xacro:arg name="effort_control" default="false"/>
  <xacro:arg name="velocity_control" default="false"/>
  <xacro:arg name="add_gripper" default="false"/>
  <xacro:arg name="add_vacuum_gripper" default="false"/>
  <xacro:arg name="add_bio_gripper" default="false"/>
  <xacro:arg name="model1300" default="false"/>
  
  <xacro:arg name="dof" default="7"/>
  <xacro:arg name="robot_ip" default=""/>
  <xacro:arg name="robot_type" default="xarm"/>
  <xacro:arg name="robot_sn" default=""/>
  <xacro:arg name="report_type" default="normal"/>

  <xacro:arg name="ros2_control_plugin" default="uf_robot_hardware/UFRobotSystemHardware"/>
  <xacro:arg name="ros2_control_params" default=""/>

  <xacro:arg name="add_realsense_d435i" default="false"/>
  <xacro:arg name="add_d435i_links" default="true"/>
  <xacro:arg name="use_gazebo_camera" default="false"/>

  <xacro:arg name="other_geometry_config_file" 
    default="$(find xarm_description)/config/default_urdf_arguments/other_geometry.yaml" 
  />
  <xacro:property name="other_geometry_config_file" value="$(arg other_geometry_config_file)" />

  <xacro:property name="other_geometry"
    value="${xacro.load_yaml(other_geometry_config_file)}"
  />

  <xacro:arg name="baud_checkset" default="true"/>
  <xacro:arg name="default_gripper_baud" default="2000000"/>
  
  <xacro:arg name="attach_to" default="world"/>
  <xacro:arg name="attach_xyz" default="0 0 0"/>
  <xacro:arg name="attach_rpy" default="0 0 0"/>
  <xacro:arg name="mesh_suffix" default="stl"/>

  <xacro:arg name="kinematics_suffix" default=""/>

  <!-- load xarm device -->
  <xacro:include filename="$(find xarm_description)/urdf/xarm_device_macro.xacro" />
  <!-- TODO: maybe make the macros use dicts themselves, but that might be digging too deep -->
  <xacro:xarm_device 
    prefix="$(arg prefix)" 
    hw_ns="$(arg hw_ns)" 
    ros2_control_plugin="$(arg ros2_control_plugin)" 
    ros2_control_params="$(arg ros2_control_params)"

    robot_ip="$(arg robot_ip)"
    dof="$(arg dof)" 
    robot_type="$(arg robot_type)" 
    report_type="$(arg report_type)"
    baud_checkset="$(arg baud_checkset)" 
    default_gripper_baud="$(arg default_gripper_baud)"
    model1300="$(arg model1300)" 
    robot_sn="$(arg robot_sn)" 

    limited="$(arg limited)" 
    effort_control="$(arg effort_control)" 
    velocity_control="$(arg velocity_control)"

    attach_to="$(arg attach_to)" 
    attach_xyz="$(arg attach_xyz)" 
    attach_rpy="$(arg attach_rpy)"

    add_gripper="$(arg add_gripper)" 
    add_vacuum_gripper="$(arg add_vacuum_gripper)" 
    add_bio_gripper="$(arg add_bio_gripper)" 
    add_realsense_d435i="$(arg add_realsense_d435i)" 
    add_d435i_links="$(arg add_d435i_links)" 

    mesh_suffix="$(arg mesh_suffix)" 
    kinematics_suffix="$(arg kinematics_suffix)" 
    use_gazebo_camera="$(arg use_gazebo_camera)" 

    add_other_geometry="${other_geometry['add']}" 
    geometry_type="${other_geometry['type']}" 
    geometry_mass="${other_geometry['mass']}"
    geometry_height="${other_geometry['height']}" 
    geometry_radius="${other_geometry['radius']}"
    geometry_length="${other_geometry['length']}" 
    geometry_width="${other_geometry['width']}"
    geometry_mesh_filename="${other_geometry['mesh_filename']}"
    geometry_mesh_origin_xyz="${other_geometry['mesh_origin_xyz']}" 
    geometry_mesh_origin_rpy="${other_geometry['mesh_origin_rpy']}"
    geometry_mesh_tcp_xyz="${other_geometry['mesh_tcp_xyz']}" 
    geometry_mesh_tcp_rpy="${other_geometry['mesh_tcp_rpy']}"
  />

</robot>
